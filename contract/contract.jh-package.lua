---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wang.
--- DateTime: 10/7/20 2:21 AM
---

function create()
    if private_data.backpack == nil then
        private_data.backpack = {size = 20, goods = {}, count = 0}
    end
end

--检查某类物品的数量
function check_item_count(gid, count)
    local pack_info = private_data.backpack
    if count == nil then count = 1 end
    for _, value in pairs(pack_info.goods) do
        if value.base_info.gid == gid and value.status == nil and value.count == count then
            return true
        end
    end
    return false
end

--讲一个物品写入背包
function pickup_item(cid, base_info)
    local count = base_info.count
    if count == nil then count = 1 end
    base_info.count = nil
    if private_data.backpack == nil then
        private_data.backpack = {size = 20, goods = {}, count = 0}
    end
    local pack_info = private_data.backpack
    if pack_info.goods[cid] ~= nil then
        -- 消耗品增加数量
        pack_info.goods[cid].count = pack_info.goods[cid].count + count
    else
        -- 塞进背包
        pack_info.goods[cid] = {base_info = base_info, count = count}
        pack_info.count = pack_info.count + 1
        assert(pack_info.count < pack_info.size, "#你的背包满了！#")
    end
end

--消耗一个物品
function spent_item(cid, count)
    local pack_info = private_data.backpack
    assert(type(count) == "number","#count不正确#")
    assert(count >= 1,"#count不正确#")
    count = math.floor(count)
    assert(pack_info ~= nil, "#背包都没有，还想扔！#")
    assert(pack_info.goods[cid] ~= nil, "#没有这个东西啦！#")
    assert(pack_info.goods[cid].status == nil, "#物品状态不正确！")
    assert(pack_info.goods[cid].count >= count, "#没这么多！#")
    pack_info.goods[cid].count = pack_info.goods[cid].count - count
    if pack_info.goods[cid].count == 0 then
        pack_info.goods[cid] = nil
        pack_info.count = pack_info.count - 1
    end
end

--提取nft到钱包
function withdraw(cid, count)
    assert(type(count) == "number", "#count 类型不对！#")
    assert(count >= 1, "#count 不正确！#")
    count = math.floor(count)
    pack_info = private_data.backpack
    assert(pack_info ~= nil, "#背包都没有，还想转！#")
    assert(pack_info.goods[cid] ~= nil, "#没有这个东西啦！#")
    assert(pack_info.goods[cid].status == nil, "#物品状态不正确！")
    local good = pack_info.goods[cid]
    assert(good.count >= count, "#没这么多！#")
    assert(good.base_info.isNft, "#该物品不是NFT!#")
    good.base_info.count = count;
    chainhelper:create_nft_asset(contract_base_info.caller, G_CONFIG.WORLD_VIEW,
            cjson.encode(good.base_info),false,false)
    good.count = good.count - count
    if good.count == 0 then
        pack_info.goods[cid] = nil
        pack_info.count = pack_info.count - 1
    end
end

--充值nft到游戏
function recharge(nft_id)
    assert(type(nft_id) == "string", "#参数NFT_ID不正确#")
    assert(string.sub(nft_id, 1, 4) == "4.2.",
            "#参数NFT_ID不正确#")
    local nft = cjson.decode(chainhelper:get_nft_asset(nft_id))
    assert(nft, "#没找到这个NFT#")
    assert(nft.world_view == G_CONFIG.WORLD_VIEW, "#不是同一个世界观#")
    assert(nft.nh_asset_owner == contract_base_info.caller,
            "#NFT 权限不正确#")
    assert(nft.nh_asset_active == contract_base_info.caller,
            "#NFT 权限不正确#")
    assert(nft.dealership == contract_base_info.caller,
            "#NFT 权限不正确#")
    local base_info = cjson.decode(nft.base_describe)
    assert(base_info.cid ~= nil, "该物品不能充值！")
    chainhelper:transfer_nht_from_caller(G_CONFIG.NFT_DESTROY_ACCOUNT, nft_id, true)
    pickup_item(base_info.cid, base_info)
end
function test() chainhelper:log('!- 3') end
